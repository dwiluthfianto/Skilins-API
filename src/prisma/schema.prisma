generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Users {
  id                 Int        @id @default(autoincrement())
  uuid               String     @unique @default(uuid())
  email              String     @unique
  full_name          String
  profile_url        String?
  password           String
  emailVerified      Boolean    @default(false)
  resetPasswordToken String?
  resetTokenExpires  DateTime?
  refreshToken       String?    @unique
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  roles_id           Int
  roles              Roles      @relation(fields: [roles_id], references: [id], onDelete: Restrict)
  Ratings            Ratings[]
  Comments           Comments[]
  Blogs              Blogs[]
  Judges             Judges[]
  Students           Students[]
}

enum RoleType {
  Admin
  Student
  User
  Staff
  Judge
}

model Roles {
  id    Int      @id @default(autoincrement())
  uuid  String   @unique @default(uuid())
  name  RoleType @unique @default(User)
  users Users[]
}

model Ratings {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  content_id   Int
  content      Contents  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  rating_by    Int
  user         Users     @relation(fields: [rating_by], references: [id], onDelete: Cascade)
  rating_value Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  Episodes     Episodes? @relation(fields: [episode_id], references: [id])
  episode_id   Int?

  @@unique(name: "ratingContent", [content_id, rating_by])
  @@unique(name: "ratingEpisode", [episode_id, rating_by])
}

model Comments {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  content_id      Int
  content         Contents  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  comment_content String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  commented_by    Int
  user            Users     @relation(fields: [commented_by], references: [id], onDelete: Cascade)
  Episodes        Episodes? @relation(fields: [episodesId], references: [id])
  episodesId      Int?
}

enum ContentType {
  EBOOK
  VIDEO
  AUDIO
  STORY
  PRAKERIN
  BLOG
}

enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Contents {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(uuid())
  type          ContentType
  title         String
  thumbnail     String
  description   String?
  slug          String          @unique
  status        ContentStatus   @default(PENDING)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  category_id   Int
  category      Categories      @relation(fields: [category_id], references: [id], onDelete: Restrict)
  Genres        Genres[]
  Comments      Comments[]
  Ratings       Ratings[]
  VideoPodcasts VideoPodcasts[]
  AudioPodcasts AudioPodcasts[]
  Blogs         Blogs[]
  Ebooks        Ebooks[]
  Stories       Stories[]
  Prakerin      Prakerin[]
  Submissions   Submissions[]
  Tags          Tags[]
}

model Categories {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  avatar_url  String?
  name        String     @unique
  description String?
  Content     Contents[]
}

model Tags {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  avatar_url  String?
  name        String     @unique
  description String?
  content     Contents[]
}

model Genres {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  avatar_url  String?
  name        String     @unique
  description String?
  content     Contents[]
}

model VideoPodcasts {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  file_url   String
  creator_id Int
  creator    Students @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  content_id Int      @unique
  content    Contents @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model AudioPodcasts {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  duration   Float
  file_url   String
  creator_id Int
  creator    Students @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  content_id Int      @unique
  content    Contents @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Blogs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  author_id  Int
  author     Users    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  content_id Int      @unique
  content    Contents @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Ebooks {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  author       String
  pages        Int
  publication  String
  file_url     String
  isbn         String
  release_date DateTime
  content_id   Int      @unique
  content      Contents @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Stories {
  id         Int        @id @default(autoincrement())
  uuid       String     @unique @default(uuid())
  author_id  Int
  author     Students   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  episodes   Episodes[]
  content_id Int        @unique
  content    Contents   @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Episodes {
  id         Int        @id @default(autoincrement())
  uuid       String     @unique @default(uuid())
  title      String
  content    String
  order      Int        @unique
  story_id   Int
  story      Stories    @relation(fields: [story_id], references: [id], onDelete: Cascade)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Comments   Comments[]
  Ratings    Ratings[]
}

model Prakerin {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  author_id    Int
  author       Students  @relation(fields: [author_id], references: [id], onDelete: Cascade)
  pages        Int
  file_url     String
  published_at DateTime?
  content_id   Int       @unique
  content      Contents  @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Submissions {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  student_id     Int
  student        Students     @relation(fields: [student_id], references: [id], onDelete: Cascade)
  content_id     Int
  content        Contents     @relation(fields: [content_id], references: [id], onDelete: Cascade)
  competition_id Int
  competition    Competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  judges         Judges[]
  Winners        Winners[]
  Score          Score[]
}

model Judges {
  id             Int           @id @default(autoincrement())
  uuid           String        @unique @default(uuid())
  user_id        Int
  user           Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role           String?
  linkedin       String?
  instagram      String?
  competition_id Int?
  competition    Competitions? @relation(fields: [competition_id], references: [id])
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  score          Score[]
  Submissions    Submissions?  @relation(fields: [submissions_id], references: [id])
  submissions_id Int?
}

model EvaluationParameter {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  competition_id Int
  parameterName  String
  weight         Float        @default(1)
  created_at     DateTime     @default(now())
  competition    Competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  scores         Score[]
}

model Score {
  id            Int                 @id @default(autoincrement())
  uuid          String              @unique @default(uuid())
  judge_id      Int
  submission_id Int
  parameter_id  Int
  score         Int
  notes         String? // Catatan opsional dari juri
  created_at    DateTime            @default(now())
  judge         Judges              @relation(fields: [judge_id], references: [id])
  submission    Submissions         @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  parameter     EvaluationParameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade)
}

model Competitions {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  thumbnail           String
  title               String
  slug                String                @unique
  type                ContentType
  description         String
  guide               String
  winner_count        Int
  start_date          DateTime
  end_date            DateTime
  submission_deadline DateTime
  Submissions         Submissions[]
  Winners             Winners[]
  Judges              Judges[]
  EvaluationParameter EvaluationParameter[]
}

model Winners {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  competition_id Int
  competition    Competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade)
  submission_id  Int
  submission     Submissions  @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  rank           Int
}

enum SexType {
  Male
  Female
}

model Students {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid())
  nis        String    @unique
  name       String
  major_id   Int
  major      Majors    @relation(fields: [major_id], references: [id], onDelete: Restrict)
  birthplace String?
  birthdate  DateTime?
  sex        SexType
  status     Boolean   @default(false)
  user_id    Int
  user       Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  VideoPodcasts VideoPodcasts[]
  AudioPodcasts AudioPodcasts[]
  Stories       Stories[]
  Prakerin      Prakerin[]

  Submissions Submissions[]
}

model Majors {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  name        String     @unique
  image_url   String?
  description String?
  avatar_url  String?
  students    Students[]
}
